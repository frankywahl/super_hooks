#!/usr/bin/env ruby

require 'super_hooks'
require 'optparse'


OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [options]"

  opts.separator "\nA tool to manage project, user, and global Git hooks for multiple git repositories.\n"

  opts.separator "\nOptions:"

  opts.on("--install", "Replace existing hooks in this repository with a call to git hooks run [hook].  Move old hooks directory to hooks.old") do 
    SuperHooks::Installer.new.run
  end

  opts.on("--uninstall", "Remove existing hooks in this repository and rename hooks.old back to hooks") do 
  end

  opts.on("--install-global", "Create a template .git directory that that will be used whenever a git repository is created or cloned that will remind the user to install git-hooks") do 
  end

  opts.on("--uninstall-global", "Turn off the global .git directory template that has the reminder") do 
  end

  opts.on("--run CMD", "run hooks for CMD (such as pre-commit)") do |cmd|
    SuperHooks::Runner.new(cmd, ARGV).run
  end

  opts.on("--list [option]", Array, "list current hooks (for option)") do |options|
    SuperHooks::Hooks.new.list_with_descriptions.each do |hook, description|
      puts "#{File.basename(hook)}  - #{description}"
    end
  end

  opts.separator ""

  opts.on("-h", "--help", "Print this help message") do 
    puts opts
    exit
  end

  opts.separator "\nSupported hooks are #{SuperHooks::Hooks.list.join(", ")}"

end.parse!

unless SuperHooks.installed? 
  puts "Git hooks is not installed for this repository"
  exit 1
end

if ARGV.empty? 
  puts "Git hooks are installed in this repository" 
  puts 
  SuperHooks::Hooks.new.list_with_descriptions.each do |hook, description|
    puts "#{File.basename(hook)}  - #{description}"
  end
  exit
end
